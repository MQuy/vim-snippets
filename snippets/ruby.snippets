snippet def
	def ${1:method_name}
		${0}
	end

snippet if
	if ${1:condition}
		${0}
	end

snippet ife
	if ${1:condition}
		${2}
	else
		${0}
	end

snippet unless
	unless ${1:condition}
		${0}
	end

snippet cla class .. end
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end
snippet clai class .. initialize .. end
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(${2:args})
			${0}
		end
	end

snippet clas class << self .. end
	class << ${1:self}
		${0}
	end

snippet mod module .. end
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end
snippet modf module .. ClassMethods .. end
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		module ClassMethods
			${0}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end

snippet lam
	lambda { |${1:args}| ${0} }

snippet ->
	-> { ${0} }

snippet ->a
	->(${1:args}) { ${0} }

snippet dov
	do |${1:v}|
		${2}
	end
